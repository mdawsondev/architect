!function(n){var t={};function e(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:o})},e.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e.w={},e(e.s=9)}([function(n,t){n.exports=require("child_process")},function(n,t){(function(t){n.exports={owner:"John Smith",title:"New Project",pathTitle:"new-project",about:"About my project...",license:"MIT",location:t,git:1,hub:0,commit:0,push:0}}).call(this,"/")},function(n,t){n.exports=require("fs")},function(n,t){n.exports=require("dns")},function(n,t){n.exports=require("readline")},function(n,t){n.exports={MIT:'MIT License\nCopyright (c) 2018 USERNAME\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.',none:'This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>'}},function(n,t,e){const o=e(1);n.exports=[[`\nquestion your name (${o.owner}): `,"owner"],[`question project title (${o.title}): `,"title"],[`question about (${o.about}): `,"about"],[`question license (${o.license}): `,"license"],[`question location (${o.location}): `,"location"],["question git init (Y/n): ","git"],["question init commit (y/N): ","commit"],["question hub init (y/N): ","hub"],["question init push (y/N): ","push"]]},function(n,t,e){"use strict";var o=e(0).exec,i=e(0).execSync,r=e(2),c=r.access,s=r.accessSync,u=r.constants||r,a="win32"==process.platform,l=function(n,t){!function(n,t){c(n,u.F_OK,function(n){t(!n)})}(n,function(e){if(e)!function(n,t){c(n,u.F_OK|u.X_OK,function(n){t(null,!n)})}(n,t);else o("command -v "+n+" 2>/dev/null && { echo >&1 '"+n+" found'; exit 0; }",function(n,e,o){t(null,!!e)})})},f=function(n){if(function(n){try{return s(n,u.F_OK),!1}catch(n){return!0}}(n))try{return!!i("command -v "+n+" 2>/dev/null && { echo >&1 '"+n+" found'; exit 0; }")}catch(n){return!1}return function(n){try{return s(n,u.F_OK|u.X_OK),!0}catch(n){return!1}}(n)};n.exports=function n(t,e){if(!e&&"undefined"!=typeof Promise)return new Promise(function(e,o){n(t,function(n,i){i?e(t):o(n)})});a?function(n,t){o("where "+n,function(n){t(null,null===n)})}(t,e):l(t,e)},n.exports.sync=function(n){return a?function(n,t){try{return!!i("where "+n)}catch(n){return!1}}(n):f(n)}},function(n,t,e){n.exports=e(7)},function(n,t,e){"use strict";var o=e(8).sync,i=e(1),r=e(6),c=e(5),s=e(2),u=e(4).createInterface({input:process.stdin,output:process.stdout}),a=e(0).exec,l=e(3),f=o("git")?1:0,h=o("hub")?1:0,E={};function T(n){E.git&&E.commit?a("cd "+n+' && git add -A && git commit -m "Initial commit"',function(){console.log("-> First commit created!"),E.hub&&I(n)}):E.hub&&I(n)}function O(n){f&&E.hub?a("cd "+n+" && hub create "+E.titlePath,function(){console.log('-> Created repo "'+E.titlePath+'" on GitHub!'),function(n){E.push&&a("cd "+n+" && git push origin master",function(){console.log("-> Pushed initial commit to GitHub!"),d()})}(n)}):d()}function I(n){console.log("-- Checking internet connection."),l.resolve("www.google.com",function(t){t?console.log("-X ERROR: NO CONNECTION ESTABLISHED."):(console.log("-> Connection found!"),O(n))})}function d(){console.log("\nProject "+E.title+" has completed setup, now exiting script.\n")}!function n(t){var e=t[0][0],o=t[0][1];u.question(e,function(t){E[o]=t||i[o],r.shift(),r.length>0?n(r):(u.close(),function(){var n,t,e=["MIT","none"];for(var o in E)switch(o){case"license":-1===e.indexOf(E.license)&&(E.license="MIT");break;case"title":E.titlePath=E[o].toLowerCase().replace(/ /g,"-").trim();break;case"git":case"commit":case"hub":case"push":"y"===E[o]?E[o]=1:E[o]=0}n=E.location+"/"+E.titlePath,console.log(""),!s.existsSync(n)&&s.mkdirSync(n),console.log("-> Built folder!"),s.appendFile(n+"/LICENSE",""+c[E.license].replace("USERNAME",E.owner),function(n){if(n)throw n}),console.log("-> Created LICENSE!"),s.appendFile(n+"/README.md","# "+E.title+"\n\n"+E.about,function(n){if(n)throw n}),console.log("-> Created README.md!"),t=n,h&&E.git?a("git init "+t,function(){console.log("-> Initialized git!"),T(t)}):T(t)}())})}(r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,